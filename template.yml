AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: 'Template for the resources required by real time crowd analysis'

Parameters:

  ProjectId:
    Type: String
    Default: "rtva"
    Description: "CodeStar projectId used to associate new resources to team members"

  FrameS3BucketNameParameter:
    Type: String
    MinLength : "1"
    Default: "coxauto-frame-bucket"
    Description: "Name of the S3 bucket for storage of captured frames."

  WebsiteS3BucketNameParameter:
    Type: String
    MinLength : "1"
    Default: "rtva-dashboard"
    Description: "Name of the S3 bucket for storage of captured frames."

  KinesisStreamNameParameter:
    Type: String
    Default: "FrameStream"
    Description: "Name of the Kinesis stream to receive frames from video capture client."

  DDBTableNameParameter:
    Type: String
    Default: "EnrichedFrame"
    Description: "Name of the DynamoDB table for persistence & querying of captured frames metadata."

  DDBGlobalSecondaryIndexNameParameter:
    Type: String
    Default: "processed_year_month-processed_timestamp-index"
    Description: "Name of the DDB Global Secondary Index for querying of captured frames by Web UI."


Resources:

  FrameS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Ref FrameS3BucketNameParameter

  WebsiteS3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        BucketName: !Ref WebsiteS3BucketNameParameter
        AccessControl: PublicRead
#        WebsiteConfiguration:
#          IndexDocument: index.html
#          ErrorDocument: error.html
      DeletionPolicy: Retain

  ImageProcessorLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: "/"
    DependsOn:
      - FrameS3Bucket
      - EnrichedFrameTable

  EventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt FrameStream.Arn
      FunctionName: !GetAtt ImageProcessorLambda.Arn
      StartingPosition: "TRIM_HORIZON"
    DependsOn:
      - FrameStream
      - ImageProcessorLambda


  FrameFetcherLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: "/"
    DependsOn:
    - FrameS3Bucket
    - EnrichedFrameTable


  FrameStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      Name: !Ref KinesisStreamNameParameter
      ShardCount: 1


  ImageProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: imageprocessor
      Description: "Function processes frame images fetched from a Kinesis stream."
      Handler: "lambda/imageprocessor.handler"
      Role: !GetAtt ImageProcessorLambdaExecutionRole.Arn
      CodeUri: .
      Timeout: 40 #seconds
      MemorySize: 128 #MB
      Runtime: python3.6
      Events:

    DependsOn:
      - FrameStream
      - ImageProcessorLambdaExecutionRole


  FrameFetcherLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "framefetcher"
      Description: "Function responds to a GET request by returning a list of frames up to a certain fetch horizon."
      Handler: "lambda/framefetcher.handler"
      Role: !GetAtt FrameFetcherLambdaExecutionRole.Arn
      CodeUri: .
      Timeout: 10 #seconds
      MemorySize: 128 #MB
      Runtime: python3.6
    DependsOn:
      - FrameFetcherLambdaExecutionRole

  EnrichedFrameTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Ref DDBTableNameParameter
      KeySchema:
        - KeyType: "HASH"
          AttributeName: "frame_id"
      AttributeDefinitions:
        - AttributeName: "frame_id"
          AttributeType: "S"
        - AttributeName: "processed_timestamp"
          AttributeType: "N"
        - AttributeName: "processed_year_month"
          AttributeType: "S"
      ProvisionedThroughput:
            WriteCapacityUnits: 10
            ReadCapacityUnits: 10
      GlobalSecondaryIndexes:
        - IndexName: !Ref DDBGlobalSecondaryIndexNameParameter
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            WriteCapacityUnits: 10
            ReadCapacityUnits: 10
          KeySchema:
          - KeyType: "HASH"
            AttributeName: "processed_year_month"
          - KeyType: "RANGE"
            AttributeName: "processed_timestamp"



Outputs:
  WebsiteURL:
    Value: !GetAtt
      - WebsiteS3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WebsiteS3Bucket
          - DomainName
    Description: Name of S3 bucket to hold website content