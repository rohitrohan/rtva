AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: 'Template for the resources required by real time crowd analysis'

Parameters:

  ProjectId:
    Type: String
    Default: "rtva"
    Description: "CodeStar projectId used to associate new resources to team members"

  FrameS3BucketNameParameter:
    Type: String
    MinLength : "1"
    Default: "coxauto-frame-bucket"
    Description: "Name of the S3 bucket for storage of captured frames."

  WebsiteS3BucketNameParameter:
    Type: String
    MinLength : "1"
    Default: "rtva-dashboard"
    Description: "Name of the S3 bucket for storage of captured frames."

  KinesisStreamNameParameter:
    Type: String
    Default: "rtva-kinesis-data-stream"
    Description: "Name of the Kinesis data stream to receive frames from Recognition video."

  DDBTableNameParameter:
    Type: String
    Default: "EnrichedFrame"
    Description: "Name of the DynamoDB table for persistence & querying of captured frames metadata."

  DDBGlobalSecondaryIndexNameParameter:
    Type: String
    Default: "processed_year_month-processed_timestamp-index"
    Description: "Name of the DDB Global Secondary Index for querying of captured frames by Web UI."

  EmailAddress:
    Description: "Email address used for SNS notification whenever people are found in video"
    Type: String
    Default: "Rohit.Rohan@coxautoinc.com"


Resources:

  FrameS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref FrameS3BucketNameParameter

  WebsiteS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref WebsiteS3BucketNameParameter
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain


  FrameStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      Name: !Ref KinesisStreamNameParameter
      ShardCount: 1


  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub ${ProjectId} SNS Topic
      Subscription:
        -
          Endpoint: !Sub ${EmailAddress}
          Protocol: email


  ImageProcessorLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole

  ImageProcessorLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${ProjectId}-image-processor-lambda-policy
      Roles:
        - !Ref ImageProcessorLambdaExecutionRole
      PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'sns:Publish'
                Resource: !Ref SNSTopic
              -
                Effect: Allow
                Action:
                    - 'kinesis:GetRecords'
                    - 'kinesis:GetShardIterator'
                    - 'kinesis:DescribeStream'
                    - 'kinesis:ListStreams'
                Resource: !GetAtt FrameStream.Arn
              -
                Effect: Allow
                Action:
                    - 'kinesis:ListStreams'
                Resource: '*'

  EventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt FrameStream.Arn
      FunctionName: !GetAtt ImageProcessorLambda.Arn
      StartingPosition: "TRIM_HORIZON"





  ImageProcessorLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: imageprocessor
      Description: "Function processes frame images fetched from a Kinesis stream."
      Handler: "lambda/imageprocessor.handler"
      Role: !GetAtt ImageProcessorLambdaExecutionRole.Arn
      CodeUri: .
      Timeout: 40 #seconds
      MemorySize: 128 #MB
      Runtime: python3.6
      Events:




  FrameFetcherLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: "/"



  FrameFetcherLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "framefetcher"
      Description: "Function responds to a GET request by returning a list of frames up to a certain fetch horizon."
      Handler: "lambda/framefetcher.handler"
      Role: !GetAtt FrameFetcherLambdaExecutionRole.Arn
      CodeUri: .
      Timeout: 10 #seconds
      MemorySize: 128 #MB
      Runtime: python3.6


  RekognitionVideoIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action: sts:AssumeRole

  RekognitionVideoPolicy:
     Type: AWS::IAM::Policy
     Properties:
      PolicyName: !Sub ${ProjectId}-recognition-video-policy
      Roles:
        - !Ref RekognitionVideoIAMRole
      PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                    - 'kinesis:*'
                Resource: !GetAtt FrameStream.Arn
              -
                Effect: Allow
                Action:
                    - 'kinesisvideo:*'
                Resource: '*'
              -
                Effect: Allow
                Action:
                    - 'rekognition:*'
                Resource: '*'


  EnrichedFrameTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Ref DDBTableNameParameter
      KeySchema:
        - KeyType: "HASH"
          AttributeName: "frame_id"
      AttributeDefinitions:
        - AttributeName: "frame_id"
          AttributeType: "S"
        - AttributeName: "processed_timestamp"
          AttributeType: "N"
        - AttributeName: "processed_year_month"
          AttributeType: "S"
      ProvisionedThroughput:
            WriteCapacityUnits: 10
            ReadCapacityUnits: 10
      GlobalSecondaryIndexes:
        - IndexName: !Ref DDBGlobalSecondaryIndexNameParameter
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            WriteCapacityUnits: 10
            ReadCapacityUnits: 10
          KeySchema:
          - KeyType: "HASH"
            AttributeName: "processed_year_month"
          - KeyType: "RANGE"
            AttributeName: "processed_timestamp"



Outputs:

  WebsiteURL:
    Value: !GetAtt
      - WebsiteS3Bucket
      - WebsiteURL
    Description: URL for website hosted on S3

  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WebsiteS3Bucket
          - DomainName
    Description: Name of S3 bucket to hold website content

  KinesisDataStreamArn:
    Description: Kinesis Data Stream Arn (used in Stream Processer Input)
    Value: !GetAtt FrameStream.Arn

  RekognitionVideoIAM:
    Description: Rekognition Video Processing IAM Arn (used in Stream Processer Input)
    Value: !GetAtt RekognitionVideoIAMRole.Arn